//#include <ModbusRTUMaster.h>
//#include <SoftwareSerial.h>
#include <SPI.h>
#include <SD.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#define alpha 0.2  //Alpha
#define pi 3.1416
//#define rxPin 8
//#define txPin 9
//#define dePin 7
#define btn_1 3
#define btn_2 2
const int sensorPin= A0;
int frecc[10] = { 0, 598, 665, 733, 800, 868, 935, 1003, 1070, 1138};//,1205, 1273 };
int con_fre = 0;
int cont = 0;
int adc_filtrado = 0;
int adc_raw = 0;
int pulsado_1 = HIGH;
int pulsado_2 = HIGH;
int estado_1 = HIGH;
int estado_2 = HIGH;
int enc_act = LOW;
unsigned long fin_1, ini_1, ini_2, fin_2;
const unsigned long periodo=1000;
unsigned long perante=0;
char caracter;
float SETFREC = 0;
float DL=0;
String dat_1 = "";
int running = LOW;
int toma = HIGH;
int temp_act = 0;
int T_DL=0;
char  nodepayload[4];
char  nodepayload2[4];
//SoftwareSerial puerta(rxPin, txPin);

LiquidCrystal_I2C lcd_1(0x27, 20, 4);
float valor_galga = 0;
float vel = 0;
float rpm = 0;
File my_File;
String onoff = "OFF";
int variador_frec=0;
//**************************
void ini_sd() {

  Serial.println("SD inicializada.");
  if (!SD.exists("data.txt")) {
    //Serial.println("sd inicializada");
    my_File = SD.open("data.txt", FILE_WRITE);
    if (my_File) {
      //Serial.println("Archivo nuevo, Escribiendo encabezado(fila 1)");
      my_File.println("seg;rpm;mm/s;kg;mm");
      my_File.close();
    } else {
      //Serial.println("Error creando el archivo data.csv");
    }
  } //else {  //Serial.println("ya existe"); }
}
void setup() {
  Wire.begin();
  pinMode(btn_1, INPUT_PULLUP);
  pinMode(btn_2, INPUT_PULLUP);
  Serial.begin(9600);
  //Serial.setTimeout(100);
  //while (!Serial) { ; }
  // library data rs 485 and modbus vdf
  //modbus.begin(9600);  // modbus baud rate, config (optional)
  //read_actual();
  
  if (!SD.begin(10)) {
    //Serial.println("initialization failed!");
    lcd_1.init();
    lcd_1.backlight();
    lcd_1.clear();
    lcd_1.setCursor(0, 0);
    lcd_1.print("NO SD");
    return;
    //delay(500);
    /*while (1)
      ;*/
  }
    ini_sd();
//********reset slave en caso de reset arduino*********
  Wire.beginTransmission(0x20);
  Wire.write('R');
  Wire.endTransmission();
//********
  //ETCG Notes - Start LCD
  lcd_1.init();
  lcd_1.backlight();
  lcd_1.clear();
  lcd_1.setCursor(0, 0);
  lcd_1.print("Iniciando espere...");
  delay(2000);
  lcd_1.clear();
  lcd_1.setCursor(0, 0);
  lcd_1.print("------UCSP------");
  lcd_1.setCursor(0, 1);
  lcd_1.print("PROYECTO  RAICES");
  delay(2000);
}
void loop() {
  
    calculate();

//************** Time--1seg ***************
unsigned long peri_act=millis();
if(peri_act - perante >= periodo){
// frec_var();


  if (running == HIGH){//valor_galga > 1 && running == HIGH) {
    encoder_trans();
    sd_card();
    cont = cont + 1;
    if (valor_galga > 1 && toma==HIGH){
    temp_act=cont;
    toma=LOW;
    }
    if(temp_act>0){
      T_DL=(cont - temp_act);
    }//else {T_DL=0;}
    //T_DL=(cont - temp_act);
/* if (valor_galga > 1){// && running == HIGH){
      T_DL=(cont - temp_act);
    }else {}//temp_act= temp_act+1;}
*/
    } else {cont = 0;}
  perante=peri_act;
  display();
  

}
//****************COMUNICACION I2C****************

//*****************serial***********
  while (Serial.available()>0) {
    caracter = Serial.read();
    switch (caracter) {
      case 'A':  //star
       
      Wire.beginTransmission(0x20);
      Wire.write('A');
      Wire.endTransmission();
  running = HIGH;  
  enc_act = HIGH;
  onoff = "ON";
        break;
      case 'B':  //stop
        //running = false;
      //  stop();
Wire.beginTransmission(0x20);
Wire.write('B');
Wire.endTransmission();
 running = LOW;
  onoff = "OFF";
        break;
      case 'C':
        lectura();
        break;
      case 'D':
        borrado();
        toma=HIGH;
        temp_act=0;
        T_DL=0;
        break;

      case '+':
        con_fre=con_fre+1;
        if(con_fre>9) con_fre=0;
        /*String valto1="+";
        valto1.concat(con_fre);*/
        Wire.beginTransmission(0x20);
        Wire.write('+');
        Wire.endTransmission();
       
        break;
      case '-':
        con_fre=con_fre-1;
        if(con_fre<0) con_fre=9;
        /*String valto2="-";
        valto2.concat(con_fre);*/
        Wire.beginTransmission(0x20);
        Wire.write('-');
        Wire.endTransmission();
       
        break;
    }
  }

//************boton mas y star***********
  estado_1 = digitalRead(btn_1);
  if (estado_1 != pulsado_1) {
    if (estado_1 == LOW && pulsado_1 == HIGH) {
      ini_1 = millis();
      pulsado_1 = estado_1;
      delay(30);
    }
    if (estado_1 == HIGH && pulsado_1 == LOW) {
      fin_1 = millis() - ini_1;
      pulsado_1 = estado_1;
      delay(30);
      if (fin_1 > 2000) {
       // star();
      Wire.beginTransmission(0x20);
      Wire.write('A');
      Wire.endTransmission();
      running = HIGH;  
  enc_act = HIGH;
  onoff = "ON";
      }
      if (fin_1 > 60 && fin_1 < 500) { 
        con_fre=con_fre+1;
        if(con_fre>9) con_fre=0;
       // envio((uint16_t)frecc[con_fre]);
       Wire.beginTransmission(0x20);
      Wire.write('+');
      Wire.endTransmission();
      }
      pulsado_1 = estado_1;
    }
  }
//************boton menos y stop***********
  estado_2 = digitalRead(btn_2);
  if (estado_2 != pulsado_2) {
    //cont=0;
    if (estado_2 == LOW && pulsado_2 == HIGH) {
      ini_2 = millis();
      //count++;
      pulsado_2 = estado_2;
      delay(30);
    }
    if (estado_2 == HIGH && pulsado_2 == LOW) {
      fin_2 = millis() - ini_2;
      delay(30);
      if (fin_2 > 2000) {
       // stop();
      Wire.beginTransmission(0x20);
      Wire.write('B');
      Wire.endTransmission();
      running = LOW;
  onoff = "OFF";
      }
      if (fin_2 > 60 && fin_2 < 500) {
        con_fre=con_fre-1;
        if(con_fre<0) con_fre=9;
      //  envio((uint16_t)frecc[con_fre]);
      Wire.beginTransmission(0x20);
      Wire.write('-');
      Wire.endTransmission();
      }
      pulsado_2 = estado_2;
    }
  }
//*****
//Serial.flush();
}
//****
//*********************************
float getfloat(byte pack[], byte i){
  union u_tag{
    byte bin[4];
    float num;
  } u;
  u.bin[0]=pack[i];
  u.bin[1]=pack[i+1];
  u.bin[2]=pack[i+2];
  u.bin[3]=pack[i+3];
  return u.num;
}
//************************************
void encoder_trans(){
/*  if (enc_act == HIGH){
Wire.beginTransmission(0x20);
Wire.write('S');
Wire.endTransmission();
enc_act = LOW;
}*/
Wire.beginTransmission(0x20);
Wire.write('V');
Wire.endTransmission();
Wire.requestFrom(0x20,4);
if(Wire.available()){
  for(int i=0;i<4;i++)nodepayload[i] = Wire.read();
  //for (int j = 0; j < 4; j++) Serial.println(nodepayload[j]);
   //for (int z=0; z<4; z++) Serial.print(nodepayload[z],HEX);
}
vel=getfloat(nodepayload,0);
Wire.endTransmission();
Wire.beginTransmission(0x20);
Wire.write('H');
Wire.endTransmission();
Wire.requestFrom(0x20,4);
if(Wire.available()){
  for(int j=0;j<4;j++)nodepayload2[j] = Wire.read();
  //for (int j = 0; j < 4; j++) Serial.println(nodepayload[j]);
   //for (int z=0; z<4; z++) Serial.print(nodepayload[z],HEX);
}
DL=getfloat(nodepayload2,0);
Wire.endTransmission();
}

void display() {
  lcd_1.clear();
  lcd_1.setCursor(0, 0);
  lcd_1.print("RPM:");
  lcd_1.setCursor(4, 0);
  lcd_1.print(rpm);
  lcd_1.setCursor(9, 0);
  lcd_1.print("Vo:");
  lcd_1.setCursor(12, 0);
  lcd_1.print(vel);
  // segunda linea
  lcd_1.setCursor(0, 1);
  lcd_1.print("Ts: ");
  lcd_1.setCursor(3, 1);
  lcd_1.print(valor_galga);
  lcd_1.setCursor(9, 1);
  lcd_1.print("PWR:");
  lcd_1.setCursor(13, 1);
  lcd_1.print(onoff);
  //while (millis() % 250 != 0) {}
  
}
void calculate() {
  //velocidad en mm/s
  SETFREC = float(frecc[con_fre]) / 100;
  rpm = (SETFREC * 0.741) - 1.43;
  if (rpm <= 0) {
    rpm = 0;
    //vel = 0;
  }
  /*if (rpm > 0) {
    vel = rpm * pi * 135 / 60;
  }*/
  /*
  vel=((float(variador_frec)/100)*0.741 - 1.43) *pi*135/60;
  if(vel<0){
    vel=0;
  }
  vel=*/
  //peso
  vel = vel;// * pi * 76 / 60;
  adc_raw = analogRead(sensorPin);
  adc_filtrado = (alpha * adc_raw) + ((1 - alpha) * adc_filtrado);
  valor_galga = (500 * adc_filtrado) / 1023;
  DL=DL;
  
  //dat_1 = String(cont) + ";" + String(rpm, 2) + ";" + String(vel, 2) + ";" + String(valor_galga, 2);
}

void lectura() {
  //Serial.println("leendo..");
if (SD.begin()) {
  my_File = SD.open("data.txt");  //, FILE_WRITE);
  if (my_File) {

    while (my_File.available()) {
      Serial.write(my_File.read());  // En un caso real se realizarÃ­an las acciones oportunas
    }
    my_File.close();
    //Serial.println("enviado por serial");
  } else {
    //Serial.println("Error al abrir el archivo");
  }
}}
void borrado() {
  //Serial.println("Removiendo data.csv...");
 if (SD.begin(10)) {
  SD.remove("data.txt");
  ini_sd();
 }
  // Serial.println("Removido data.csv");
}

void sd_card() {
  //Serial.println("escribiendo data... ");
  //dat_1=String(cont)+";"+String(rpm)+";"+String(vel)+";"+String(valor_galga);
  if (SD.begin()) {
      
  if (SD.exists("data.txt")) {
    my_File = SD.open("data.txt", FILE_WRITE);  //abrimos  el archivo
    //Serial.println("escribiendo data... ");
    if (my_File) {
    //my_File.print(";");
    my_File.print(cont);
    my_File.print(";");
    my_File.print(rpm);
    my_File.print(";");
    my_File.print(vel);
    my_File.print(";");
    my_File.print(valor_galga);
    my_File.print(";");
    my_File.println(DL);
    // my_File.println(dat_1);
      
      //delay(10);
      my_File.close();  //cerramos el archivo
      //delay(10);
      //Serial.println("Escribiendo SD: ");
    } else {
      //estado = "OFF";
      Serial.println("error al abrir archivo...");
    }
  }
}else {
  Serial.println("error se bloqueo");}
}
